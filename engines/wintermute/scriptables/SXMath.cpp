/* ScummVM - Graphic Adventure Engine
 *
 * ScummVM is the legal property of its developers, whose names
 * are too numerous to list here. Please refer to the COPYRIGHT
 * file distributed with this source distribution.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 */

/*
 * This file is based on WME Lite.
 * http://dead-code.org/redir.php?target=wmelite
 * Copyright (c) 2011 Jan Nedoma
 */

#include "engines/wintermute/scriptables/SXMath.h"
#include "engines/wintermute/scriptables/ScStack.h"
#include "engines/wintermute/scriptables/ScValue.h"
#include "engines/wintermute/persistent.h"
#include <cmath>

namespace WinterMute {

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////


IMPLEMENT_PERSISTENT(CSXMath, true)

//////////////////////////////////////////////////////////////////////////
CSXMath::CSXMath(CBGame *inGame): CBScriptable(inGame) {

}


//////////////////////////////////////////////////////////////////////////
CSXMath::~CSXMath() {

}


//////////////////////////////////////////////////////////////////////////
HRESULT CSXMath::ScCallMethod(CScScript *Script, CScStack *Stack, CScStack *ThisStack, char *Name) {
	//////////////////////////////////////////////////////////////////////////
	// Abs
	//////////////////////////////////////////////////////////////////////////
	if (strcmp(Name, "Abs") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(fabs(Stack->Pop()->GetFloat()));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Acos
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Acos") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(acos(Stack->Pop()->GetFloat()));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Asin
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Asin") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(asin(Stack->Pop()->GetFloat()));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Atan
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Atan") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(atan(Stack->Pop()->GetFloat()));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Atan2
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Atan2") == 0) {
		Stack->CorrectParams(2);
		double y = Stack->Pop()->GetFloat();
		double x = Stack->Pop()->GetFloat();
		Stack->PushFloat(atan2(y, x));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Ceil
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Ceil") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(ceil(Stack->Pop()->GetFloat()));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Cos
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Cos") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(cos(DegreeToRadian(Stack->Pop()->GetFloat())));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Cosh
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Cosh") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(cosh(DegreeToRadian(Stack->Pop()->GetFloat())));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Exp
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Exp") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(exp(Stack->Pop()->GetFloat()));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Floor
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Floor") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(floor(Stack->Pop()->GetFloat()));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Log
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Log") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(log(Stack->Pop()->GetFloat()));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Log10
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Log10") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(log10(Stack->Pop()->GetFloat()));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Pow
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Pow") == 0) {
		Stack->CorrectParams(2);
		double x = Stack->Pop()->GetFloat();
		double y = Stack->Pop()->GetFloat();

		Stack->PushFloat(pow(x, y));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Sin
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Sin") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(sin(DegreeToRadian(Stack->Pop()->GetFloat())));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Sinh
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Sinh") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(sinh(DegreeToRadian(Stack->Pop()->GetFloat())));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Tan
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Tan") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(tan(DegreeToRadian(Stack->Pop()->GetFloat())));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Tanh
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Tanh") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(tanh(DegreeToRadian(Stack->Pop()->GetFloat())));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// Sqrt
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "Sqrt") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(sqrt(Stack->Pop()->GetFloat()));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// DegToRad
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "DegToRad") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(DegreeToRadian(Stack->Pop()->GetFloat()));
		return S_OK;
	}

	//////////////////////////////////////////////////////////////////////////
	// RadToDeg
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "RadToDeg") == 0) {
		Stack->CorrectParams(1);
		Stack->PushFloat(RadianToDegree(Stack->Pop()->GetFloat()));
		return S_OK;
	}

	else return E_FAIL;
}


//////////////////////////////////////////////////////////////////////////
CScValue *CSXMath::ScGetProperty(char *Name) {
	_scValue->SetNULL();

	//////////////////////////////////////////////////////////////////////////
	// Type
	//////////////////////////////////////////////////////////////////////////
	if (strcmp(Name, "Type") == 0) {
		_scValue->SetString("math");
		return _scValue;
	}

	//////////////////////////////////////////////////////////////////////////
	// PI
	//////////////////////////////////////////////////////////////////////////
	else if (strcmp(Name, "PI") == 0) {
		_scValue->SetFloat(PI);
		return _scValue;
	}

	else return _scValue;
}


//////////////////////////////////////////////////////////////////////////
double CSXMath::DegreeToRadian(double Value) {
	return Value * (PI / 180.0f);
}


//////////////////////////////////////////////////////////////////////////
double CSXMath::RadianToDegree(double Value) {
	return Value * (180.0f / PI);
}


//////////////////////////////////////////////////////////////////////////
HRESULT CSXMath::Persist(CBPersistMgr *PersistMgr) {

	CBScriptable::Persist(PersistMgr);
	return S_OK;
}

} // end of namespace WinterMute
